

Jestを使用したテスト駆動開発（TDD）のベストプラクティスについて説明します。

## TDDの基本サイクル

1. 🔴 失敗するテストを書く（Red）
2. 💚 テストを通すための最小限のコードを書く（Green）
3. ♻️ リファクタリングする（Refactor）

## ベストプラクティス

### 1. テストの構造化
```javascript:src/__tests__/user.test.js
describe('User', () => {
  // テストごとの初期化
  let user;
  beforeEach(() => {
    user = new User();
  });

  // テストをグループ化
  describe('validation', () => {
    test('名前が空の場合はエラー', () => {
      expect(() => {
        user.setName('');
      }).toThrow('名前は必須です');
    });

    test('メールアドレスの形式が不正な場合はエラー', () => {
      expect(() => {
        user.setEmail('invalid-email');
      }).toThrow('メールアドレスの形式が不正です');
    });
  });
});
```

### 2. テストケースの命名規則
```javascript:src/__tests__/payment.test.js
describe('PaymentService', () => {
  // Given-When-Then パターンを使用
  test('残高が不足している場合、支払いは失敗する', () => {
    // Given（前提条件）
    const account = new Account(1000);
    const payment = new Payment(2000);

    // When（実行）& Then（検証）
    expect(() => {
      account.process(payment);
    }).toThrow('残高不足');
  });
});
```

### 3. テストデータの管理
```javascript:src/__tests__/fixtures/userData.js
// テストデータを別ファイルで管理
export const validUserData = {
  name: 'テストユーザー',
  email: 'test@example.com',
  age: 25
};

export const invalidUserData = {
  name: '',
  email: 'invalid-email',
  age: -1
};
```

```javascript:src/__tests__/userRegistration.test.js
import { validUserData, invalidUserData } from './fixtures/userData';

describe('UserRegistration', () => {
  test('有効なユーザーデータで登録できる', () => {
    const registration = new UserRegistration();
    expect(registration.register(validUserData)).toBeTruthy();
  });
});
```

### 4. モックの適切な使用
```javascript:src/__tests__/userService.test.js
describe('UserService', () => {
  // 外部依存のモック
  const mockRepository = {
    save: jest.fn(),
    findById: jest.fn()
  };

  const userService = new UserService(mockRepository);

  test('ユーザーが正常に保存される', async () => {
    // モックの振る舞いを設定
    mockRepository.save.mockResolvedValue({ id: 1, ...validUserData });

    const result = await userService.createUser(validUserData);
    
    // モックが正しく呼び出されたことを確認
    expect(mockRepository.save).toHaveBeenCalledWith(validUserData);
    expect(result.id).toBe(1);
  });
});
```

### 5. 非同期テストの扱い
```javascript:src/__tests__/asyncOperations.test.js
describe('AsyncOperations', () => {
  // async/awaitを使用した非同期テスト
  test('データを非同期に取得できる', async () => {
    const data = await fetchData();
    expect(data).toBeDefined();
  });

  // Promiseを使用したテスト
  test('エラーハンドリング', () => {
    return expect(fetchDataWithError())
      .rejects
      .toThrow('データの取得に失敗しました');
  });
});
```

### 6. テストの独立性を保つ
```javascript:src/__tests__/database.test.js
describe('Database', () => {
  // テストごとにデータをクリーンアップ
  beforeEach(async () => {
    await database.clear();
  });

  test('データを保存できる', async () => {
    const result = await database.save({ id: 1, name: 'テスト' });
    expect(result.id).toBe(1);
  });
});
```

### 7. カバレッジの確認
```json:package.json
{
  "scripts": {
    "test": "jest",
    "test:coverage": "jest --coverage",
    "test:watch": "jest --watch"
  },
  "jest": {
    "coverageThreshold": {
      "global": {
        "branches": 80,
        "functions": 80,
        "lines": 80,
        "statements": 80
      }
    }
  }
}
```

### 8. テストの実装手順
```javascript:src/__tests__/calculator.test.js
// 1. 最初は最もシンプルなケースからスタート
describe('Calculator', () => {
  test('1 + 1 = 2', () => {
    const calc = new Calculator();
    expect(calc.add(1, 1)).toBe(2);
  });

  // 2. エッジケースを追加
  test('負の数の加算', () => {
    const calc = new Calculator();
    expect(calc.add(-1, -1)).toBe(-2);
  });

  // 3. エラーケースを追加
  test('数値以外が入力された場合はエラー', () => {
    const calc = new Calculator();
    expect(() => {
      calc.add('1', 'a');
    }).toThrow('数値を入力してください');
  });
});
```

## TDDを実践する際の重要なポイント

1. 小さなステップで進める
2. テストは機能仕様として考える
3. リファクタリングを怠らない
4. テストコードも品質を保つ
5. CIでテストを自動実行する

これらのベストプラクティスを意識しながらTDDを実践することで、より保守性の高い、品質の良いコードを書くことができます。


