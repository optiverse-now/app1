
```yaml
# ai-tdd-diary-app-design.yaml (構造化YAML)
application:
  name: ai-tdd-diary-app
  description: 日記アプリ
  package_manager: npm
  technical_stack:
    frontend:
      name: Next.js
      version: 15
      language: TypeScript
      ui_library: shadcn/ui
      css_framework: Tailwind CSS
      routing: App Router
      testing_library: "@testing-library/react"
      api_style: RESTful
    backend:
      name: Node.js
      version: 22.12.0
      framework: Hono
      language: TypeScript
      orm: Prisma
      database: PostgreSQL
      api_style: RESTful

directory_structure:
  root:
    - prisma/ # Prisma関連ファイル
    - docs/ # ドキュメント
    - .github/workflows/ # CI/CDワークフロー
    - .husky/ # Git hooks (テスト実行など)
    - Makefile # 開発用コマンド
    - Ticket # タスクチケット
    - feedback.txt # 要件定義や構造化YAMLの修正内容を記述
  frontend:
    path: frontend/
    structure:
      - app/ # Next.js App Router
        subdirectories:
          - api/ # APIルート
          - components/ # UIコンポーネント
            subdirectories:
              - ui/ # shadcn/ui components (e.g., ui/Button, ui/Card)
              - common/ # 共通コンポーネント (主にPresentational、パスカルケース、e.g., CommonButton, SearchInput)
              - features/ # 特定の機能に紐づくコンポーネント (Containerを含む、機能ごとにディレクトリを分割、e.g., features/user/components/UserProfile)
              - layout/ # ページレイアウト用のコンポーネント (e.g., layout/PageLayout)
          - layout.tsx # ルートレイアウト
          - page.tsx # トップページ
      - public/ # 静的ファイル
      - styles/ # スタイル
      - tests/ # フロントエンドテスト
        subdirectories:
          - unit/
          - integration/
      - lib/ # ユーティリティ
        subdirectories:
          - utils.ts # 汎用ユーティリティ関数
          - styles.ts # スタイル関連のユーティリティ関数 (cn, cvaなど)
          - types.ts # 型定義
  backend:
    path: backend/
    structure:
      - src/
        subdirectories:
          - controllers/ # リクエスト処理
          - models/ # データモデル
          - routes/ # ルーティング定義
          - services/ # ビジネスロジック
          - middlewares/ # ミドルウェア
          - schemas/ # データベーススキーマ
      - tests/ # バックエンドテスト

component_design:
  principle: Atomic Design
  base_path: frontend/app/components
  ui_library: shadcn/ui
  ui_library_customization: |
    shadcn/uiのコンポーネントをカスタマイズする場合は、ui/ディレクトリ内の該当コンポーネントをコピーし、
    必要な変更を加えた上で、common/ディレクトリに配置する。
    コンポーネント名はパスカルケースとし、ファイル名はコンポーネント名と同じにする (例: common/CommonButton.tsx)。
  naming_convention:
    - ディレクトリ: ケバブケース (例: user-profile)
    - ファイル: ui/ ディレクトリ以下はケバブケース (例: button.tsx)、それ以外はパスカルケース (例: CommonButton.tsx)
    - コンポーネント: パスカルケース (例: UserProfile)
  component_structure:
    atoms:
      - name: Button
        type: presentational
        path: ui/button.tsx
        description: ボタンコンポーネント (shadcn/uiのButtonをそのまま使用)
        ai_instruction: |
          タスク1: チケットを作成
            チケット番号: TICKET-001
            タスク: ボタンコンポーネントの作成
            担当: AIエージェント
            期日: {{今日の日付}}
            関連資料: このYAMLドキュメントの`component_design.component_structure.atoms.Button`セクション

          タスク2: このコンポーネントのReact関数コンポーネントを`frontend/app/components/ui/button.tsx`に作成してください。
          入力: このYAMLドキュメントの`component_design.component_structure.atoms.Button`セクション
          出力: `frontend/app/components/ui/button.tsx`ファイル
          依存関係: なし
          具体的な手順:
            1. `frontend/app/components/ui/button.tsx`ファイルを作成します。
            2. 以下のコードをファイルにコピーします。
              ```tsx
              import { Button } from 'shadcn/ui';
              import { cn } from '@/lib/styles';

              type ButtonProps = React.ComponentProps<typeof Button>;

              const CustomButton: React.FC<ButtonProps> = ({ className, children, ...props }) => {
                return (
                  <Button className={cn(className)} {...props}>
                    {children}
                  </Button>
                );
              };

              export default CustomButton;
              ```
            3. `Button`コンポーネントと`ButtonProps`型をshadcn/uiからインポートします。
            4. `cn`関数を`@/lib/styles`からインポートします。
            5. `CustomButton`コンポーネントを定義し、propsをButtonProps型で定義します。
            6. `CustomButton`コンポーネントをエクスポートします。

          タスク3: このコンポーネントのユニットテストを`frontend/tests/unit/ui/button.test.tsx`に作成してください。
          入力: 作成した`frontend/app/components/ui/button.tsx`ファイル
          出力: `frontend/tests/unit/ui/button.test.tsx`ファイル
          依存関係: `@testing-library/react`
          具体的な手順:
            1. `frontend/tests/unit/ui/button.test.tsx`ファイルを作成します。
            2. 以下のテストケースを含むファイルを生成します。
              - コンポーネントが正しくレンダリングされること
              - `variant` propに応じたスタイルが適用されること (例: "primary", "secondary")
              - `onClick` propで渡された関数がクリック時に実行されること
        storybook: true
        props:
          - name: variant
            type: '"default" | "secondary" | "destructive" | "outline" | "ghost" | "link"'
            description: ボタンのスタイル
          - name: size
            type: '"default" | "sm" | "lg" | "icon"'
            description: ボタンのサイズ
          - name: onClick
            type: "() => void"
            description: クリック時のイベントハンドラ
          - name: className
            type: string
            description: 外部から適用するスタイル
      - name: Input
        type: presentational
        path: ui/input.tsx
        description: テキスト入力フィールド (shadcn/uiのInputをそのまま使用)
        ai_instruction: |
          タスク1: チケットを作成
            チケット番号: TICKET-002
            タスク: インプットコンポーネントの作成
            担当: AIエージェント
            期日: {{今日の日付}}
            関連資料: このYAMLドキュメントの`component_design.component_structure.atoms.Input`セクション

          タスク2: このコンポーネントのReact関数コンポーネントを`frontend/app/components/ui/input.tsx`に作成してください。
          入力: このYAMLドキュメントの`component_design.component_structure.atoms.Input`セクション
          出力: `frontend/app/components/ui/input.tsx`ファイル
          依存関係: なし
          具体的な手順:
            1. `frontend/app/components/ui/input.tsx`ファイルを作成します。
            2. 以下のコードをファイルにコピーします。
              ```tsx
              import { Input } from 'shadcn/ui';
              import { cn } from '@/lib/styles';

              type InputProps = React.ComponentProps<typeof Input>;

              const CustomInput: React.FC<InputProps> = ({ className, ...props }) => {
                return <Input className={cn('...', className)} {...props} />;
              };

              export default CustomInput;
              ```
            3. `Input`コンポーネントと`InputProps`型をshadcn/uiからインポートします。
            4. `cn`関数を`@/lib/styles`からインポートします。
            5. `CustomInput`コンポーネントを定義し、propsをInputProps型で定義します。
            6. `CustomInput`コンポーネントをエクスポートします。

          タスク3: このコンポーネントのユニットテストを`frontend/tests/unit/ui/input.test.tsx`に作成してください。
          入力: 作成した`frontend/app/components/ui/input.tsx`ファイル
          出力: `frontend/tests/unit/ui/input.test.tsx`ファイル
          依存関係: `@testing-library/react`
          具体的な手順:
            1. `frontend/tests/unit/ui/input.test.tsx`ファイルを作成します。
            2. 以下のテストケースを含むファイルを生成します。
              - コンポーネントが正しくレンダリングされること
              - `placeholder` propが表示されること
              - `value` propが初期値として設定されること
              - `onChange` propで渡された関数が入力時に実行されること
        storybook: true
        props:
          - name: type
            type: string
            description: インプットのタイプ
          - name: placeholder
            type: string
            description: プレースホルダー
          - name: value
            type: string
            description: インプットの値
          - name: onChange
            type: "(e: React.ChangeEvent<HTMLInputElement>) => void"
            description: 値変更時のイベントハンドラ
          - name: className
            type: string
            description: 外部から適用するスタイル
    molecules:
      - name: SearchInput
        type: presentational
        path: common/SearchInput.tsx
        description: 検索用のインプットコンポーネント
        ai_instruction: |
          タスク1: チケットを作成
            チケット番号: TICKET-003
            タスク: 検索インプットコンポーネントの作成
            担当: AIエージェント
            期日: {{今日の日付}}
            関連資料: このYAMLドキュメントの`component_design.component_structure.molecules.SearchInput`セクション

          タスク2: 依存するAtomコンポーネント (`Input`, `Button`) が存在することを確認してください。存在しない場合は、先にそれらのコンポーネントを生成してください。

          タスク3: このコンポーネントのReact関数コンポーネントを`frontend/app/components/common/SearchInput.tsx`に作成してください。
          入力: このYAMLドキュメントの`component_design.component_structure.molecules.SearchInput`セクション
          出力: `frontend/app/components/common/SearchInput.tsx`ファイル
          依存関係: `frontend/app/components/ui/button.tsx`, `frontend/app/components/ui/input.tsx`
          具体的な手順:
            1. `frontend/app/components/common/SearchInput.tsx`ファイルを作成します。
            2. 以下のコードをファイルにコピーします。
              ```tsx
              import CustomInput from '@/components/ui/input';
              import CustomButton from '@/components/ui/button';
              import { cn } from '@/lib/styles';

              type SearchInputProps = {
                value: string;
                onChange: (value: string) => void;
                className?: string;
              };

              const SearchInput: React.FC<SearchInputProps> = ({ value, onChange, className }) => {
                return (
                  <div className={cn('flex items-center', className)}>
                    <CustomInput type="text" value={value} onChange={(e) => onChange(e.target.value)} className="mr-2" placeholder="検索..." />
                    <CustomButton>検索</CustomButton>
                  </div>
                );
              };

              export default SearchInput;
              ```
            3. `CustomInput`コンポーネントを`@/components/ui/input`からインポートします。
            4. `CustomButton`コンポーネントを`@/components/ui/button`からインポートします。
            5. `cn`関数を`@/lib/styles`からインポートします。
            6. `SearchInputProps`型を定義します。
            7. `SearchInput`コンポーネントを`SearchInputProps`型を使って定義します。
            8. `SearchInput`コンポーネントをエクスポートします。

          タスク4: このコンポーネントのユニットテストを`frontend/tests/unit/common/SearchInput.test.tsx`に作成してください。
          入力: 作成した`frontend/app/components/common/SearchInput.tsx`ファイル
          出力: `frontend/tests/unit/common/SearchInput.test.tsx`ファイル
          依存関係: `@testing-library/react`
          具体的な手順:
            1. `frontend/tests/unit/common/SearchInput.test.tsx`ファイルを作成します。
            2. 以下のテストケースを含むファイルを生成します。
              - コンポーネントが正しくレンダリングされること
              - `Input`コンポーネントに渡される`value`と`onChange`のpropsが正しく連携していること
              - `Button`コンポーネントが表示されていること
              - スナップショットテスト
        storybook: true
        props:
          - name: value
            type: string
            description: インプットの値
          - name: onChange
            type: "(value: string) => void"
            description: 値変更時のイベントハンドラ
          - name: className
            type: string
            description: 外部から適用するスタイル
        dependencies:
          - atoms/Input
          - atoms/Button
    organisms:
      - name: Header
        type: presentational
        path: common/Header.tsx
        description: ページ上部のヘッダーコンポーネント
        ai_instruction: |
          タスク1: チケットを作成
            チケット番号: TICKET-004
            タスク: ヘッダーコンポーネントの作成
            担当: AIエージェント
            期日: {{今日の日付}}
            関連資料: このYAMLドキュメントの`component_design.component_structure.organisms.Header`セクション

          タスク2: 依存するMoleculeコンポーネント (`SearchInput`, `UserMenu`) が存在することを確認してください。存在しない場合は、先にそれらのコンポーネントを生成してください。

          タスク3: このコンポーネントのReact関数コンポーネントを`frontend/app/components/common/Header.tsx`に作成してください。
          入力: このYAMLドキュメントの`component_design.component_structure.organisms.Header`セクション
          出力: `frontend/app/components/common/Header.tsx`ファイル
          依存関係: `frontend/app/components/common/SearchInput.tsx`, `frontend/app/components/common/UserMenu.tsx`
          具体的な手順:
            1. `frontend/app/components/common/Header.tsx`ファイルを作成します。
            2. 以下のコードをファイルにコピーします。
              ```tsx
              import SearchInput from '@/components/common/SearchInput';
              import UserMenu from '@/components/common/UserMenu';
              import { cn } from '@/lib/styles';

              type HeaderProps = {
                className?: string;
              };

              const Header: React.FC<HeaderProps> = ({ className }) => {
                return (
                  <header className={cn('flex items-center justify-between p-4 border-b', className)}>
                    <SearchInput value="" onChange={() => {}} />
                    <UserMenu />
                  </header>
                );
              };

              export default Header;
              ```
            3. `SearchInput`コンポーネントを`@/components/common/SearchInput`からインポートします。
            4. `UserMenu`コンポーネントを`@/components/common/UserMenu`からインポートします。
            5. `cn`関数を`@/lib/styles`からインポートします。
            6. `HeaderProps`型を定義します。
            7. `Header`コンポーネントを`HeaderProps`型を使って定義します。
            8. `Header`コンポーネントをエクスポートします。

          タスク4: このコンポーネントのユニットテストを`frontend/tests/unit/common/Header.test.tsx`に作成してください。
          入力: 作成した`frontend/app/components/common/Header.tsx`ファイル
          出力: `frontend/tests/unit/common/Header.test.tsx`ファイル
          依存関係: `@testing-library/react`
          具体的な手順:
            1. `frontend/tests/unit/common/Header.test.tsx`ファイルを作成します。
            2. 以下のテストケースを含むファイルを生成します。
              - コンポーネントが正しくレンダリングされること
              - `SearchInput`コンポーネントが表示されていること
              - `UserMenu`コンポーネントが表示されていること
              - スナップショットテスト
        storybook: true
        dependencies:
          - molecules/SearchInput
          - molecules/UserMenu
      - name: UserProfile
        type: container
        path: features/user/components/UserProfile.tsx
        description: ユーザー情報を取得して表示する
        ai_instruction: |
          タスク1: チケットを作成
            チケット番号: TICKET-005
            タスク: ユーザープロフィールコンポーネントの作成
            担当: AIエージェント
            期日: {{今日の日付}}
            関連資料: このYAMLドキュメントの`component_design.component_structure.organisms.UserProfile`セクションおよび`api_design`セクション

          タスク2: 依存するAtomコンポーネント (`Avatar`, `Label`) とMoleculeコンポーネント (`UserData`) が存在することを確認してください。存在しない場合は、先にそれらのコンポーネントを生成してください。

          タスク3: ユーザー情報を取得するAPIエンドポイント `/api/users/{userId}` の仕様 (`api_design.endpoints./users/{userId}.GET`) を確認してください。リクエストパラメータ、レスポンス形式、エラーコードなどを把握してください。

          タスク4: このコンポーネントのReact関数コンポーネントを`frontend/app/components/features/user/components/UserProfile.tsx`に作成してください。
          入力: このYAMLドキュメントの`component_design.component_structure.organisms.UserProfile`セクションおよび`api_design`セクション
          出力: `frontend/app/components/features/user/components/UserProfile.tsx`ファイル
          依存関係: `/api/users/{userId}` APIエンドポイント, `frontend/app/components/ui/avatar.tsx`, `frontend/app/components/ui/label.tsx`, `frontend/app/components/common/UserData.tsx`
          具体的な手順:
            1. `frontend/app/components/features/user/components/UserProfile.tsx`ファイルを作成します。
            2. 以下のコードをファイルにコピーします。
              ```tsx
              import { useState, useEffect } from 'react';
              import { Avatar } from '@/components/ui/avatar';
              import { Label } from '@/components/ui/label';
              import UserData from '@/components/common/UserData';
              import { User } from '@/lib/types';

              type UserProfileProps = {
                userId: number;
              };

              const UserProfile: React.FC<UserProfileProps> = ({ userId }) => {
                const [user, setUser] = useState<User | null>(null);
                const [loading, setLoading] = useState<boolean>(true);
                const [error, setError] = useState<string | null>(null);

                useEffect(() => {
                  const fetchUser = async () => {
                    try {
                      const response = await fetch(`/api/users/${userId}`);
                      if (!response.ok) {
                        throw new Error('ユーザー情報の取得に失敗しました');
                      }
                      const data = await response.json();
                      setUser(data);
                    } catch (error: any) {
                      setError(error.message);
                    } finally {
                      setLoading(false);
                    }
                  };

                  fetchUser();
                }, [userId]);

                if (loading) {
                  return <div>Loading...</div>;
                }

                if (error) {
                  return <div>Error: {error}</div>;
                }

                if (!user) {
                  return null;
                }

                return (
                  <div>
                    <Avatar />
                    <Label>{user.name}</Label>
                    <UserData user={user} />
                  </div>
                );
              };

              export default UserProfile;
              ```
            3. 必要なモジュールをインポートします。
            4. `UserProfileProps`型を定義します。
            5. `UserProfile`コンポーネントを定義し、propsをUserProfileProps型で定義します。
            6. `useState`と`useEffect`フックを使用して、ユーザー情報の取得、ローディング状態、エラー処理を実装します。
            7. APIから取得したユーザー情報を基に、`Avatar`、`Label`、`UserData`コンポーネントを表示します。
            8. `UserProfile`コンポーネントをエクスポートします。

          タスク5: このコンポーネントのユニットテストを`frontend/tests/unit/features/user/components/UserProfile.test.tsx`に作成してください。
          入力: 作成した`frontend/app/components/features/user/components/UserProfile.tsx`ファイル
          出力: `frontend/tests/unit/features/user/components/UserProfile.test.tsx`ファイル
          依存関係: `@testing-library/react`, `jest`
          具体的な手順:
            1. `frontend/tests/unit/features/user/components/UserProfile.test.tsx`ファイルを作成します。
            2. `/api/users/1`へのfetchをモックし、成功時と失敗時のシナリオをテストします。
            3. ローディング状態が正しく表示されることをテストします。
            4. エラー発生時にエラーメッセージが表示されることをテストします。
            5. ユーザー情報が取得できた場合に、`Avatar`、`Label`、`UserData`コンポーネントが正しくレンダリングされることをテストします。
            6. スナップショットテスト
        storybook: false
        dependencies:
          - atoms/Avatar
          - atoms/Label
          - molecules/UserData
    templates:
      - name: ListPageTemplate
        type: container
        path: layout/ListPageLayout.tsx
        description: 一覧ページの基本的なレイアウトを提供するテンプレート
        ai_instruction: |
          タスク1: チケットを作成
            チケット番号: TICKET-006
            タスク: 一覧ページテンプレートの作成
            担当: AIエージェント
            期日: {{今日の日付}}
            関連資料: このYAMLドキュメントの`component_design.component_structure.templates.ListPageTemplate`セクション

          タスク2: 依存するOrganismコンポーネント (`Header`, `Footer`, `Sidebar`) が存在することを確認してください。存在しない場合は、先にそれらのコンポーネントを生成してください。

          タスク3: このコンポーネントのReact関数コンポーネントを`frontend/app/components/layout/ListPageLayout.tsx`に作成してください。
          入力: このYAMLドキュメントの`component_design.component_structure.templates.ListPageTemplate`セクション
          出力: `frontend/app/components/layout/ListPageLayout.tsx`ファイル
          依存関係: `frontend/app/components/common/Header.tsx`, `frontend/app/components/common/Footer.tsx`, `frontend/app/components/common/Sidebar.tsx`
          具体的な手順:
            1. `frontend/app/components/layout/ListPageLayout.tsx`ファイルを作成します。
            2. 以下のコードをファイルにコピーします。
              ```tsx
              import Header from '@/components/common/Header';
              import Footer from '@/components/common/Footer';
              import Sidebar from '@/components/common/Sidebar';

              type ListPageLayoutProps = {
                children: React.ReactNode;
              };

              const ListPageLayout: React.FC<ListPageLayoutProps> = ({ children }) => {
                return (
                  <div>
                    <Header />
                    <div className="flex">
                      <Sidebar />
                      <main className="flex-grow p-4">{children}</main>
                    </div>
                    <Footer />
                  </div>
                );
              };

              export default ListPageLayout;
              ```
            3. 必要なモジュールをインポートします。
            4. `ListPageLayoutProps`型を定義します。
            5. `ListPageLayout`コンポーネントを定義し、propsをListPageLayoutProps型で定義します。
            6. 子要素 (`children`) を含める基本的なレイアウトを実装します。
            7. `ListPageLayout`コンポーネントをエクスポートします。

          タスク4: このコンポーネントのユニットテストを`frontend/tests/unit/layout/ListPageLayout.test.tsx`に作成してください。
          入力: 作成した`frontend/app/components/layout/ListPageLayout.tsx`ファイル
          出力: `frontend/tests/unit/layout/ListPageLayout.test.tsx`ファイル
          依存関係: `@testing-library/react`
          具体的な手順:
            1. `frontend/tests/unit/layout/ListPageLayout.test.tsx`ファイルを作成します。
            2. コンポーネントが正しくレンダリングされ、子要素が表示されることをテストします。
            3. `Header`、`Sidebar`、`Footer`コンポーネントが表示されることをテストします。
            4. スナップショットテスト
        storybook: false
        dependencies:
          - organisms/Header
          - organisms/Footer
          - organisms/Sidebar

api_design:
  principle: RESTful
  base_path: backend/src
  endpoint_naming_convention: kebab-case
  request_response_format: JSON
  authentication:
    method: JWT
    token_location: Authorization header
    secret_key_path: .env
    implementation: |
      ユーザーログイン時に、ユーザーIDと有効期限を含むJWTを生成し、HTTPレスポンスのAuthorizationヘッダーに設定して返します。
      認証が必要なAPIへのリクエスト時には、AuthorizationヘッダーからJWTを取得し、検証します。
      JWTの検証には、jsonwebtokenライブラリを使用します。
    ai_instruction: |
      タスク1: チケットを作成
        チケット番号: TICKET-007
        タスク: 認証機能の実装
        担当: AIエージェント
        期日: {{今日の日付}}
        関連資料: このYAMLドキュメントの`api_design.authentication`セクション

      タスク2: `jsonwebtoken`ライブラリがインストールされていることを確認してください。インストールされていない場合は、インストールしてください (`npm install jsonwebtoken`)。

      タスク3: ユーザーログイン時にJWTを生成し、Authorizationヘッダーに設定して返す機能を`backend/src/controllers/auth.ts`に実装してください。
      入力: このYAMLドキュメントの`api_design.authentication`セクション
      出力: `backend/src/controllers/